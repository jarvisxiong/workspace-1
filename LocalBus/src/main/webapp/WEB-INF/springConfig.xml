<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/cache 
                           http://www.springframework.org/schema/cache/spring-cache.xsd
                           http://www.springframework.org/schema/tx 
    					   http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan base-package="com.neppro.localbus" />
	<context:annotation-config />
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
			<bean
				class="org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter"></bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<tx:annotation-driven />



	<!-- auto-detect the default Servlet for the container at startup time, 
		using a list of known names for most of the major Servlet containers (including 
		Tomcat, Jetty, GlassFish, JBoss, Resin, WebLogic, and WebSphere) for serving 
		static resources such as js, images, css etc.. -->
	<mvc:default-servlet-handler />


	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" 
		destroy-method="close"> <property name="driverClassName" value="com.mysql.jdbc.Driver" 
		/> <property name="url" value="jdbc:mysql://localhost:3306/localbus" /> <property 
		name="username" value="root" /> <property name="password" value="" /> </bean> -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- <prop key="hibernate.cache.use_second_level_cache">true</prop> <prop 
					key="hibernate.cache.use_query_cache">true</prop> <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory 
					</prop> <prop key="hibernate.cache.ehcache.configurationResourceName">/ehcache.xml</prop> -->
			</props>
		</property>
		<property name="packagesToScan" value="com.neppro.localbus.model" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="springHikariCP" />
		<property name="connectionTestQuery" value="SELECT 1" />
		<property name="dataSourceClassName"
			value="com.mysql.jdbc.jdbc2.optional.MysqlDataSource" />
		<property name="dataSourceProperties">
			<props>
				<prop key="url">jdbc:mysql://localhost:3306/localbus</prop>
				<prop key="user">root</prop>
				<prop key="password"></prop>
				<prop key="cachePrepStmts">true</prop>
				<prop key="prepStmtCacheSize">250</prop>
				<prop key="prepStmtCacheSqlLimit">2048</prop>

			</props>
		</property>
	</bean>

	<bean id="hikariDataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

	<bean id="configurationBuilder" class="com.vladmihalcea.flexypool.config.Configuration$Builder">
		<constructor-arg value="flexyHikariPool" />
		<constructor-arg ref="hikariDataSource" />
		<constructor-arg
			value="#{ T(com.vladmihalcea.flexypool.adaptor.HikariCPPoolAdapter).FACTORY }" />
	</bean>

	<bean id="configuration" factory-bean="configurationBuilder"
		factory-method="build" />

	<bean id="dataSource" class="com.vladmihalcea.flexypool.FlexyPoolDataSource"
		init-method="start" destroy-method="stop">
		<constructor-arg ref="configuration" />
		<constructor-arg>
			<array>
				<bean
					class="com.vladmihalcea.flexypool.strategy.IncrementPoolOnTimeoutConnectionAcquiringStrategy.Factory">
					<constructor-arg value="5" />
				</bean>
				<bean
					class="com.vladmihalcea.flexypool.strategy.RetryConnectionAcquiringStrategy.Factory">
					<constructor-arg value="2" />
				</bean>
			</array>
		</constructor-arg>
	</bean>

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<!-- <property name="basename" value="classpath:validation_error_messages" /> -->
		<property name="basename" value="/WEB-INF/validation_error_messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<!-- SHIRO CONFIGURATION -->

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.htm" />
		<property name="successUrl" value="/success.htm" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filterChainDefinitions">
			<value>
			 
           <!-- /login.htm=authc
          /hello.htm = authc
            /profit = authcBasic, roles[admin]
			/stats = authcBasic, perms["stats:read"]
             
          /vehicle-categories/*=authcBasic, rest[vehicle-categories]
        -->
         	/vehicle-categories/*=authcBasic
          <!--  /login.htm=authc -->
           <!-- /** = authc 
           -->
        
			</value>
		</property>
	</bean>
	
	<bean id="sha256Matcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="SHA-256"/>
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="springHibernateJdbcRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define the Shiro Realm implementation you want to use to connect to 
		your back-end -->
	<!-- security datasource: -->
	<bean id="springHibernateJdbcRealm" class="com.neppro.localbus.security.SpringHibernateJdbcRealm">
		<property name="credentialsMatcher" ref="saltedCredentialsMatcher"/>
	</bean>


	<!-- ENABLE SHIRO ANNOTATIONS -->
	<!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
	<!-- the lifecycleBeanProcessor has run: -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>